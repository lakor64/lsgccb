*** gas/config/obj-coff.h	Mon Jan 29 01:00:00 2024
--- gas/config/obj-coff.h	Wed Jul  3 04:32:09 2024
***************
*** 72,81 ****
--- 72,88 ----
  #ifdef TC_Z8K
  #include "coff/z8k.h"
  #define TARGET_FORMAT "coff-z8k"
  #endif
  
+ #ifdef TC_RISCV
+ #include "coff/riscv64.h"
+ #ifndef TARGET_FORMAT
+ #define TARGET_FORMAT "coff-riscv64"
+ #endif
+ #endif
+ 
  #ifdef TC_SH
  
  #ifdef TE_PE
  #define COFF_WITH_PE
  #endif
*** gas/config/tc-riscv.c	Mon Jan 29 01:00:00 2024
--- gas/config/tc-riscv.c	Wed Jul  3 12:39:07 2024
***************
*** 28,38 ****
--- 28,40 ----
  #include "itbl-ops.h"
  #include "dwarf2dbg.h"
  #include "dw2gencfi.h"
  
  #include "bfd/elfxx-riscv.h"
+ #ifdef OBJ_ELF
  #include "elf/riscv.h"
+ #endif
  #include "opcode/riscv.h"
  
  #include <stdint.h>
  
  /* Information about an instruction, including its format, operands
***************
*** 138,147 ****
--- 140,154 ----
  
  #ifndef DEFAULT_RISCV_ATTR
  #define DEFAULT_RISCV_ATTR 0
  #endif
  
+ #if defined (OBJ_COFF) || defined (OBJ_MAYBE_COFF)
+ /* RISC-V64G ISA for ReactOS LH RISC-V */
+ #define DEFAULT_RISCV_ARCH_WITH_EXT "rv64g"
+ #endif
+ 
  /* Let riscv_after_parse_args set the default value according to xlen.  */
  #ifndef DEFAULT_RISCV_ARCH_WITH_EXT
  #define DEFAULT_RISCV_ARCH_WITH_EXT NULL
  #endif
  
***************
*** 152,183 ****
--- 159,201 ----
  
  #ifndef DEFAULT_RISCV_PRIV_SPEC
  #define DEFAULT_RISCV_PRIV_SPEC "1.11"
  #endif
  
+ #ifdef OBJ_ELF
  static const char default_arch[] = DEFAULT_ARCH;
  static const char *default_arch_with_ext = DEFAULT_RISCV_ARCH_WITH_EXT;
+ #endif
+ 
  static enum riscv_spec_class default_isa_spec = ISA_SPEC_CLASS_NONE;
  static enum riscv_spec_class default_priv_spec = PRIV_SPEC_CLASS_NONE;
  
  static unsigned xlen = 0; /* The width of an x-register.  */
  static unsigned abi_xlen = 0; /* The width of a pointer in the ABI.  */
+ 
+ #ifdef OBJ_ELF
  static bool rve_abi = false;
+ #endif
+ 
+ #ifdef OBJ_ELF
  enum float_abi
  {
    FLOAT_ABI_DEFAULT = -1,
    FLOAT_ABI_SOFT,
    FLOAT_ABI_SINGLE,
    FLOAT_ABI_DOUBLE,
    FLOAT_ABI_QUAD
  };
  static enum float_abi float_abi = FLOAT_ABI_DEFAULT;
+ #endif
  
  #define LOAD_ADDRESS_INSN (abi_xlen == 64 ? "ld" : "lw")
  #define ADD32_INSN (xlen == 64 ? "addiw" : "addi")
  
+ #ifdef OBJ_ELF
  static unsigned elf_flags = 0;
+ #endif
  
  static bool probing_insn_operands;
  
  /* Set the default_isa_spec.  Return 0 if the spec isn't supported.
     Otherwise, return 1.  */
***************
*** 204,215 ****
--- 222,236 ----
  
  static int
  riscv_set_default_priv_spec (const char *s)
  {
    enum riscv_spec_class class = PRIV_SPEC_CLASS_NONE;
+ 
+ #ifdef OBJ_ELF
    unsigned major, minor, revision;
    obj_attribute *attr;
+ #endif
  
    RISCV_GET_PRIV_SPEC_CLASS (s, class);
    if (class != PRIV_SPEC_CLASS_NONE)
      {
        default_priv_spec = class;
***************
*** 221,230 ****
--- 242,252 ----
        as_bad (_("unknown default privileged spec `%s' set by "
  		"-mpriv-spec or --with-priv-spec"), s);
        return 0;
      }
  
+ #ifdef OBJ_ELF
    /* Set the default_priv_spec by the privileged elf attributes.  */
    attr = elf_known_obj_attributes_proc (stdoutput);
    major = (unsigned) attr[Tag_RISCV_priv_spec].i;
    minor = (unsigned) attr[Tag_RISCV_priv_spec_minor].i;
    revision = (unsigned) attr[Tag_RISCV_priv_spec_revision].i;
***************
*** 241,250 ****
--- 263,275 ----
  
    /* Still can not find the privileged spec class.  */
    as_bad (_("unknown default privileged spec `%d.%d.%d' set by "
  	    "privileged elf attributes"), major, minor, revision);
    return 0;
+ #else
+ 	return 1;
+ #endif
  }
  
  /* This is the set of options which the .option pseudo-op may modify.  */
  struct riscv_set_options
  {
***************
*** 262,271 ****
--- 287,297 ----
    1, /* relax */
    DEFAULT_RISCV_ATTR, /* arch_attr */
    0, /* csr_check */
  };
  
+ #ifdef OBJ_ELF
  /* Enable or disable the rvc flags for riscv_opts.  Turn on the rvc flag
     for elf_flags once we have enabled c extension.  */
  
  static void
  riscv_set_rvc (bool rvc_value)
***************
*** 281,290 ****
--- 307,317 ----
  static void
  riscv_set_tso (void)
  {
    elf_flags |= EF_RISCV_TSO;
  }
+ #endif
  
  /* The linked list hanging off of .subsets_list records all enabled extensions,
     which are parsed from the architecture string.  The architecture string can
     be set by the -march option, the elf architecture attributes, and the
     --with-arch configure option.  */
***************
*** 296,305 ****
--- 323,333 ----
    &xlen,		/* xlen.  */
    &default_isa_spec,	/* isa_spec.  */
    true,			/* check_unknown_prefixed_ext.  */
  };
  
+ 
  /* Update the architecture string in the subset_list.  */
  
  static void
  riscv_reset_subsets_list_arch_str (void)
  {
***************
*** 340,358 ****
--- 368,389 ----
      }
    riscv_release_subset_list (riscv_rps_as.subset_list);
    riscv_parse_subset (&riscv_rps_as, s);
    riscv_reset_subsets_list_arch_str ();
  
+ #ifdef OBJ_ELF
    riscv_set_rvc (false);
    if (riscv_subset_supports (&riscv_rps_as, "c")
        || riscv_subset_supports (&riscv_rps_as, "zca"))
      riscv_set_rvc (true);
  
    if (riscv_subset_supports (&riscv_rps_as, "ztso"))
      riscv_set_tso ();
+ #endif
  }
  
+ #ifdef OBJ_ELF
  /* Indicate -mabi option is explictly set.  */
  static bool explicit_mabi = false;
  
  /* Set the abi information.  */
  
***************
*** 411,420 ****
--- 442,452 ----
    elf_flags |= float_abi << 1;
  
    if (rve_abi)
      elf_flags |= EF_RISCV_RVE;
  }
+ #endif
  
  /* Handle of the OPCODE hash table.  */
  static htab_t op_hash = NULL;
  
  /* Handle of the type of .insn hash table.  */
***************
*** 446,457 ****
--- 478,491 ----
  const char FLT_CHARS[] = "rRsSfFdDxXpPhH";
  
  /* Indicate we are already assemble any instructions or not.  */
  static bool start_assemble = false;
  
+ #ifdef OBJ_ELF
  /* Indicate ELF attributes are explicitly set.  */
  static bool explicit_attr = false;
+ #endif
  
  /* Indicate CSR or priv instructions are explicitly used.  */
  static bool explicit_priv_attr = false;
  
  static char *expr_parse_end;
***************
*** 710,723 ****
--- 744,765 ----
  /* The default target format to use.  */
  
  const char *
  riscv_target_format (void)
  {
+ #if defined (OBJ_MAYBE_COFF) || defined (OBJ_COFF)
+ # if defined (TE_PE) || defined (TE_PEP)
+ 	return "pe-riscv64-little";
+ # else
+ 	return "coff-riscv64-little";
+ # endif
+ #elif defined (OBJ_MAYBE_ELF) || defined (OBJ_ELF)
    if (target_big_endian)
      return xlen == 64 ? "elf64-bigriscv" : "elf32-bigriscv";
    else
      return xlen == 64 ? "elf64-littleriscv" : "elf32-littleriscv";
+ #endif
  }
  
  /* Return the length of instruction INSN.  */
  
  static inline unsigned int
***************
*** 1130,1140 ****
  
    while (entry != NULL)
      {
        if (!need_check_version
  	  || (default_priv_spec >= entry->define_version
! 	      && default_priv_spec < entry->abort_version))
         {
           /* Find the CSR according to the specific version.  */
           return entry->address;
         }
        entry = entry->next;
--- 1172,1183 ----
  
    while (entry != NULL)
      {
        if (!need_check_version
  	  || (default_priv_spec >= entry->define_version
! 	      && default_priv_spec < entry->abort_version)
! 	)
         {
           /* Find the CSR according to the specific version.  */
           return entry->address;
         }
        entry = entry->next;
***************
*** 3942,3952 ****
--- 3985,3997 ----
       before assembling.  */
    if (!start_assemble)
      {
        start_assemble = true;
  
+ #ifdef OBJ_ELF
        riscv_set_abi_by_arch ();
+ #endif
        if (!riscv_set_default_priv_spec (NULL))
         return;
      }
  
    riscv_mapping_state (MAP_INSN, 0, false/* fr_align_code */);
***************
*** 3987,4052 ****
--- 4032,4114 ----
  
  const char *md_shortopts = "O::g::G:";
  
  enum options
  {
+ #ifdef OBJ_ELF
    OPTION_MARCH = OPTION_MD_BASE,
    OPTION_PIC,
+ #else
+   OPTION_PIC = OPTION_MD_BASE,
+ #endif
    OPTION_NO_PIC,
+ #ifdef OBJ_ELF
    OPTION_MABI,
+ #endif
    OPTION_RELAX,
    OPTION_NO_RELAX,
    OPTION_ARCH_ATTR,
    OPTION_NO_ARCH_ATTR,
    OPTION_CSR_CHECK,
    OPTION_NO_CSR_CHECK,
+ #ifdef OBJ_ELF
    OPTION_MISA_SPEC,
    OPTION_MPRIV_SPEC,
    OPTION_BIG_ENDIAN,
    OPTION_LITTLE_ENDIAN,
+ #endif
    OPTION_END_OF_ENUM
  };
  
  struct option md_longopts[] =
  {
+ #ifdef OBJ_ELF
    {"march", required_argument, NULL, OPTION_MARCH},
+ #endif
    {"fPIC", no_argument, NULL, OPTION_PIC},
    {"fpic", no_argument, NULL, OPTION_PIC},
    {"fno-pic", no_argument, NULL, OPTION_NO_PIC},
+ #ifdef OBJ_ELF
    {"mabi", required_argument, NULL, OPTION_MABI},
+ #endif
    {"mrelax", no_argument, NULL, OPTION_RELAX},
    {"mno-relax", no_argument, NULL, OPTION_NO_RELAX},
    {"march-attr", no_argument, NULL, OPTION_ARCH_ATTR},
    {"mno-arch-attr", no_argument, NULL, OPTION_NO_ARCH_ATTR},
    {"mcsr-check", no_argument, NULL, OPTION_CSR_CHECK},
    {"mno-csr-check", no_argument, NULL, OPTION_NO_CSR_CHECK},
+ #ifdef OBJ_ELF
    {"misa-spec", required_argument, NULL, OPTION_MISA_SPEC},
    {"mpriv-spec", required_argument, NULL, OPTION_MPRIV_SPEC},
    {"mbig-endian", no_argument, NULL, OPTION_BIG_ENDIAN},
    {"mlittle-endian", no_argument, NULL, OPTION_LITTLE_ENDIAN},
+ #endif
  
    {NULL, no_argument, NULL, 0}
  };
  size_t md_longopts_size = sizeof (md_longopts);
  
  int
  md_parse_option (int c, const char *arg)
  {
    switch (c)
      {
+ #ifdef OBJ_ELF
      case OPTION_MARCH:
        default_arch_with_ext = arg;
        break;
+ #endif
  
      case OPTION_NO_PIC:
        riscv_opts.pic = false;
        break;
  
      case OPTION_PIC:
        riscv_opts.pic = true;
        break;
  
+ #ifdef OBJ_ELF
      case OPTION_MABI:
        if (strcmp (arg, "ilp32") == 0)
  	riscv_set_abi (32, FLOAT_ABI_SOFT, false);
        else if (strcmp (arg, "ilp32e") == 0)
  	riscv_set_abi (32, FLOAT_ABI_SOFT, true);
***************
*** 4068,4077 ****
--- 4130,4140 ----
  	riscv_set_abi (64, FLOAT_ABI_QUAD, false);
        else
  	return 0;
        explicit_mabi = true;
        break;
+ #endif
  
      case OPTION_RELAX:
        riscv_opts.relax = true;
        break;
  
***************
*** 4093,4102 ****
--- 4156,4166 ----
  
      case OPTION_NO_CSR_CHECK:
        riscv_opts.csr_check = false;
        break;
  
+ #ifdef OBJ_ELF
      case OPTION_MISA_SPEC:
        return riscv_set_default_isa_spec (arg);
  
      case OPTION_MPRIV_SPEC:
        return riscv_set_default_priv_spec (arg);
***************
*** 4106,4123 ****
--- 4170,4189 ----
        break;
  
      case OPTION_LITTLE_ENDIAN:
        target_big_endian = 0;
        break;
+ #endif
  
      default:
        return 0;
      }
  
    return 1;
  }
  
+ #ifdef OBJ_ELF 
  void
  riscv_after_parse_args (void)
  {
    /* The --with-arch is optional for now, so we still need to set the xlen
       according to the default_arch, which is set by the --target.  */
***************
*** 4143,4152 ****
--- 4209,4236 ----
       then produce version 3 by default.  This allows us to use the full
       range of registers in a .cfi_return_column directive.  */
    if (flag_dwarf_cie_version == -1)
      flag_dwarf_cie_version = 3;
  }
+ #else
+ void
+ riscv_after_parse_args (void)
+ {
+   /* only risc-v 64 is supported for now */
+   xlen = 64;
+   abi_xlen = 64;
+   riscv_set_default_isa_spec (DEFAULT_RISCV_ISA_SPEC);
+   riscv_set_default_priv_spec (DEFAULT_RISCV_PRIV_SPEC);
+   riscv_set_arch (DEFAULT_RISCV_ARCH_WITH_EXT);
+ 
+   /* If the CIE to be produced has not been overridden on the command line,
+      then produce version 3 by default.  This allows us to use the full
+      range of registers in a .cfi_return_column directive.  */
+   if (flag_dwarf_cie_version == -1)
+     flag_dwarf_cie_version = 3;
+ }
+ #endif
  
  bool riscv_parse_name (const char *name, struct expressionS *ep,
  		       enum expr_mode mode)
  {
    unsigned int regno;
***************
*** 4559,4577 ****
--- 4643,4669 ----
    ch = *input_line_pointer;
    *input_line_pointer = '\0';
  
    if (strcmp (name, "rvc") == 0)
      {
+ #ifdef OBJ_ELF
        riscv_update_subset (&riscv_rps_as, "+c");
        riscv_reset_subsets_list_arch_str ();
        riscv_set_rvc (true);
+ #else
+ 	  as_warn(_("rvc option is not supported on this emulation"));
+ #endif
      }
    else if (strcmp (name, "norvc") == 0)
      {
+ #ifdef OBJ_ELF
        riscv_update_subset (&riscv_rps_as, "-c");
        riscv_reset_subsets_list_arch_str ();
        riscv_set_rvc (false);
+ #else
+ 	  as_warn(_("norvc option is not supported on this emulation"));
+ #endif
      }
    else if (strcmp (name, "pic") == 0)
      riscv_opts.pic = true;
    else if (strcmp (name, "nopic") == 0)
      riscv_opts.pic = false;
***************
*** 4583,4592 ****
--- 4675,4685 ----
      riscv_opts.csr_check = true;
    else if (strcmp (name, "no-csr-check") == 0)
      riscv_opts.csr_check = false;
    else if (strncmp (name, "arch,", 5) == 0)
      {
+ #ifdef OBJ_ELF
        name += 5;
        if (ISSPACE (*name) && *name != '\0')
  	name++;
        riscv_update_subset (&riscv_rps_as, name);
        riscv_reset_subsets_list_arch_str ();
***************
*** 4596,4605 ****
--- 4689,4701 ----
  	  || riscv_subset_supports (&riscv_rps_as, "zca"))
  	riscv_set_rvc (true);
  
        if (riscv_subset_supports (&riscv_rps_as, "ztso"))
  	riscv_set_tso ();
+ #else
+ 	  as_warn(_("arch option is not supported on this emulation"));
+ #endif
      }
    else if (strcmp (name, "push") == 0)
      {
        struct riscv_option_stack *s;
  
***************
*** 4982,5005 ****
  md_show_usage (FILE *stream)
  {
    fprintf (stream, _("\
  RISC-V options:\n\
    -fpic or -fPIC              generate position-independent code\n\
!   -fno-pic                    don't generate position-independent code (default)\n\
!   -march=ISA                  set the RISC-V architecture\n\
    -misa-spec=ISAspec          set the RISC-V ISA spec (2.2, 20190608, 20191213)\n\
    -mpriv-spec=PRIVspec        set the RISC-V privilege spec (1.9.1, 1.10, 1.11, 1.12)\n\
!   -mabi=ABI                   set the RISC-V ABI\n\
!   -mrelax                     enable relax (default)\n\
!   -mno-relax                  disable relax\n\
!   -march-attr                 generate RISC-V arch attribute\n\
!   -mno-arch-attr              don't generate RISC-V arch attribute\n\
!   -mcsr-check                 enable the csr ISA and privilege spec version checks\n\
!   -mno-csr-check              disable the csr ISA and privilege spec version checks (default)\n\
!   -mbig-endian                assemble for big-endian\n\
!   -mlittle-endian             assemble for little-endian\n\
! "));
  }
  
  /* Standard calling conventions leave the CFA at SP on entry.  */
  
  void
--- 5078,5107 ----
  md_show_usage (FILE *stream)
  {
    fprintf (stream, _("\
  RISC-V options:\n\
    -fpic or -fPIC              generate position-independent code\n\
!   -fno-pic                    don't generate position-independent code (default)\n"
! #ifdef OBJ_ELF
!   "-march=ISA                  set the RISC-V architecture\n\
    -misa-spec=ISAspec          set the RISC-V ISA spec (2.2, 20190608, 20191213)\n\
    -mpriv-spec=PRIVspec        set the RISC-V privilege spec (1.9.1, 1.10, 1.11, 1.12)\n\
!   -mabi=ABI                   set the RISC-V ABI\n"
! #endif
!   "-mrelax                     enable relax (default)\n\
!   -mno-relax                  disable relax\n"
! #ifdef OBJ_ELF
!   "-march-attr                 generate RISC-V arch attribute\n\
!   -mno-arch-attr              don't generate RISC-V arch attribute\n"
! #endif
!   "-mcsr-check                 enable the csr ISA and privilege spec version checks\n\
!   -mno-csr-check              disable the csr ISA and privilege spec version checks (default)\n"
! #ifdef OBJ_ELF
!   "-mbig-endian                assemble for big-endian\n\
!   -mlittle-endian             assemble for little-endian\n"
! #endif
! ));
  }
  
  /* Standard calling conventions leave the CFA at SP on entry.  */
  
  void
***************
*** 5028,5044 ****
--- 5130,5148 ----
  
    as_bad (_("unknown register `%s'"), regname);
    return -1;
  }
  
+ #ifdef OBJ_ELF
  void
  riscv_elf_final_processing (void)
  {
    riscv_set_abi_by_arch ();
    riscv_release_subset_list (riscv_rps_as.subset_list);
    elf_elfheader (stdoutput)->e_flags |= elf_flags;
  }
+ #endif
  
  /* Parse the .sleb128 and .uleb128 pseudos.  Only allow constant expressions,
     since these directives break relaxation when used with symbol deltas.  */
  
  static void
***************
*** 5109,5118 ****
--- 5213,5223 ----
  }
  
  /* Update architecture and privileged elf attributes.  If we don't set
     them, then try to output the default ones.  */
  
+ #ifdef OBJ_ELF
  static void
  riscv_write_out_attrs (void)
  {
    const char *arch_str, *priv_str, *p;
    /* versions[0]: major version.
***************
*** 5176,5185 ****
--- 5281,5291 ----
  riscv_set_public_attributes (void)
  {
    if (riscv_opts.arch_attr || explicit_attr)
      riscv_write_out_attrs ();
  }
+ #endif
  
  /* Scan uleb128 subtraction expressions and insert fixups for them.
     e.g., .uleb128 .L1 - .L0
     Because relaxation may change the value of the subtraction, we
     must resolve them at link-time.  */
***************
*** 5228,5238 ****
--- 5334,5346 ----
  /* Called after all assembly has been done.  */
  
  void
  riscv_md_finish (void)
  {
+ #ifdef OBJ_ELF
    riscv_set_public_attributes ();
+ #endif
    if (riscv_opts.relax)
      bfd_map_over_sections (stdoutput, riscv_insert_uleb128_fixes, NULL);
  }
  
  /* Called just before the assembler exits.  */
***************
*** 5247,5262 ****
--- 5355,5375 ----
  
  void
  riscv_adjust_symtab (void)
  {
    bfd_map_over_sections (stdoutput, riscv_check_mapping_symbols, (char *) 0);
+ #ifdef OBJ_ELF
    elf_adjust_symtab ();
+ #else
+   coff_adjust_symtab ();
+ #endif
  }
  
  /* Given a symbolic attribute NAME, return the proper integer value.
     Returns -1 if the attribute is not known.  */
  
+ #ifdef OBJ_ELF
  int
  riscv_convert_symbolic_attribute (const char *name)
  {
    static const struct
    {
***************
*** 5351,5363 ****
--- 5464,5493 ----
    restore_line_pointer (c);
    demand_empty_rest_of_line ();
  
    bfdsym = symbol_get_bfdsym (sym);
    elfsym = elf_symbol_from (bfdsym);
+ 
    gas_assert (elfsym);
    elfsym->internal_elf_sym.st_other |= STO_RISCV_VARIANT_CC;
  }
+ #else
+ 
+ /* Parse a .attribute directive.  */
+ 
+ static void
+ s_riscv_attribute (int ignored ATTRIBUTE_UNUSED)
+ {
+   as_warn(_(".attribute directive is not supported on this emulation"));
+ }
+ 
+ static void
+ s_variant_cc (int ignored ATTRIBUTE_UNUSED)
+ {
+   as_warn(_(".variant_cc directive is not supported on this emulation"));
+ }
+ #endif
  
  /* Same as elf_copy_symbol_attributes, but without copying st_other.
     This is needed so RISC-V specific st_other values can be independently
     specified for an IFUNC resolver (that is called by the dynamic linker)
     and the symbol it resolves (aliased to the resolver).  In particular,
***************
*** 5365,5374 ****
--- 5495,5505 ----
     then attaching an IFUNC resolver to that symbol should not override
     the st_other setting.  Requiring the directive on the IFUNC resolver
     symbol would be unexpected and problematic in C code, where the two
     symbols appear as two independent function declarations.  */
  
+ #ifdef OBJ_ELF
  void
  riscv_elf_copy_symbol_attributes (symbolS *dest, symbolS *src)
  {
    struct elf_obj_sy *srcelf = symbol_get_obj (src);
    struct elf_obj_sy *destelf = symbol_get_obj (dest);
***************
*** 5383,5392 ****
--- 5514,5524 ----
  	  *destelf->size = *srcelf->size;
  	}
        S_SET_SIZE (dest, S_GET_SIZE (src));
      }
  }
+ #endif
  
  /* RISC-V pseudo-ops table.  */
  static const pseudo_typeS riscv_pseudo_table[] =
  {
    {"option", s_riscv_option, 0},
*** gas/config/tc-riscv.h	Mon Jan 29 01:00:00 2024
--- gas/config/tc-riscv.h	Wed Jul  3 11:08:42 2024
***************
*** 168,177 ****
--- 168,179 ----
  extern void riscv_init_frag (struct frag *, int);
  
  #define obj_adjust_symtab() riscv_adjust_symtab ()
  extern void riscv_adjust_symtab (void);
  
+ #ifdef OBJ_ELF
  void riscv_elf_copy_symbol_attributes (symbolS *, symbolS *);
  #define OBJ_COPY_SYMBOL_ATTRIBUTES(DEST, SRC)  \
    riscv_elf_copy_symbol_attributes (DEST, SRC)
+ #endif
  
  #endif /* TC_RISCV */
*** /dev/null	Thu Jan  1 01:00:00 1970
--- gas/config/te-pepriscv64.h	Wed Jul  3 04:09:08 2024
***************
*** 0 ****
--- 1,29 ----
+ /* Copyright (C) 2024 Free Software Foundation, Inc.
+ 
+    This file is part of GAS, the GNU Assembler.
+ 
+    GAS is free software; you can redistribute it and/or modify
+    it under the terms of the GNU General Public License as
+    published by the Free Software Foundation; either version 3,
+    or (at your option) any later version.
+ 
+    GAS is distributed in the hope that it will be useful, but
+    WITHOUT ANY WARRANTY; without even the implied warranty of
+    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See
+    the GNU General Public License for more details.
+ 
+    You should have received a copy of the GNU General Public License
+    along with GAS; see the file COPYING.  If not, write to the Free
+    Software Foundation, 51 Franklin Street - Fifth Floor, Boston, MA
+    02110-1301, USA.  */
+ 
+ #define TE_PEP
+ #define COFF_WITH_peRiscV64
+ 
+ #define TE_PE
+ #define LEX_AT (LEX_BEGIN_NAME | LEX_NAME) /* Can have @'s inside labels.  */
+ 
+ /* The PE format supports long section names.  */
+ #define COFF_LONG_SECTION_NAMES
+ 
+ #include "obj-format.h"
*** gas/configure.tgt	Mon Jan 29 01:00:00 2024
--- gas/configure.tgt	Wed Jul  3 04:07:09 2024
***************
*** 374,383 ****
--- 374,384 ----
    ppc-*-kaos*)				fmt=elf ;;
  
    pru-*-*)				fmt=elf ;;
  
    riscv*-*-haiku*)			fmt=elf endian=little em=haiku ;;
+   riscv*-*-pe* | riscv*-*-mingw*)	fmt=coff em=pepriscv64 ;;
    riscv*-*-*)				fmt=elf ;;
  
    rx-*-linux*)				fmt=elf em=linux ;;
  
    s390-*-linux-*)			fmt=elf em=linux ;;
