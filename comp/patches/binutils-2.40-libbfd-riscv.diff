*** bfd/bfd.c	Sat Jan 14 01:00:00 2023
--- bfd/bfd.c	Sun Sep 24 12:09:41 2023
***************
*** 1864,1873 ****
--- 1864,1877 ----
        || strcmp (name, "pei-i386") == 0
        || strcmp (name, "pe-x86-64") == 0
        || strcmp (name, "pei-x86-64") == 0
        || strcmp (name, "pe-aarch64-little") == 0
        || strcmp (name, "pei-aarch64-little") == 0
+ 	  || strcmp (name, "pe-riscv64-little") == 0
+ 	  || strcmp (name, "pei-riscv64-little") == 0
+ 	  || strcmp (name, "pe-riscv32-little") == 0
+ 	  || strcmp (name, "pei-riscv32-little") == 0
        || strcmp (name, "pe-arm-wince-little") == 0
        || strcmp (name, "pei-arm-wince-little") == 0
        || strcmp (name, "pei-loongarch64") == 0
        || strcmp (name, "aixcoff-rs6000") == 0
        || strcmp (name, "aix5coff64-rs6000") == 0)
*** /dev/null	Thu Jan  1 01:00:00 1970
--- bfd/coff-riscv.c	Tue Sep 26 00:19:47 2023
***************
*** 0 ****
--- 1,227 ----
+ /* BFD back-end for RISC-V COFF files.
+    Copyright (C) 2023 Free Software Foundation, Inc.
+ 
+    This file is part of BFD, the Binary File Descriptor library.
+ 
+    This program is free software; you can redistribute it and/or modify
+    it under the terms of the GNU General Public License as published by
+    the Free Software Foundation; either version 3 of the License, or
+    (at your option) any later version.
+ 
+    This program is distributed in the hope that it will be useful,
+    but WITHOUT ANY WARRANTY; without even the implied warranty of
+    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+    GNU General Public License for more details.
+ 
+    You should have received a copy of the GNU General Public License
+    along with this program; if not, write to the Free Software
+    Foundation, Inc., 51 Franklin Street - Fifth Floor, Boston,
+    MA 02110-1301, USA.
+ */
+ 
+ /* Note we have to make sure not to include headers twice.
+    Not all headers are wrapped in #ifdef guards, so we define
+    PEI_HEADERS to prevent double including here.  */
+ #ifndef PEI_HEADERS
+ #include "sysdep.h"
+ #include "bfd.h"
+ #include "libbfd.h"
+ #include "coff/riscv.h"
+ #include "coff/internal.h"
+ #include "libcoff.h"
+ #include "libiberty.h"
+ #endif
+ 
+ #include "opcode/riscv.h"
+ 
+ #ifdef COFF_WITH_peRISCV64
+ #define BADMAG(x) BADMAG64(x)
+ #elif defined(COFF_WITH_peRISCV128)
+ #define BADMAG(x) BADMAG128(x)
+ #elif defined(COFF_WITH_peRISCV32)
+ #define BADMAG(x) BADMAG32(x)
+ #endif
+ 
+ #ifdef COFF_WITH_peRISCV64
+ static const reloc_howto_type riscv_reloc_howto_pc = HOWTO(IMAGE_REL_RISCV64_PC, 0, 8, 64, true, 0,
+ 	 complain_overflow_signed,
+ 	 NULL, "RISCV64_PC",
+ 	 false, 0, ENCODE_BTYPE_IMM (-1U), true);
+ 
+ static const reloc_howto_type riscv_reloc_howto_jalr = HOWTO (IMAGE_REL_RISCV64_JALR, 0, 8, 64, true, 0,
+ 	 complain_overflow_dont,
+ 	 NULL, "RISCV64_CALL",
+ 	 false, 0, ENCODE_UTYPE_IMM (-1U) | ((bfd_vma) ENCODE_ITYPE_IMM (-1U) << 32), true);
+ 
+ static const reloc_howto_type* const riscv_howto_table[] = {
+      &riscv_reloc_howto_pc,
+      &riscv_reloc_howto_jalr,
+ };
+ #endif
+ 
+ #ifndef NUM_ELEM
+ #define NUM_ELEM(a) ((sizeof (a)) / sizeof ((a)[0]))
+ #endif
+ 
+ #define NUM_RELOCS NUM_ELEM (riscv_howto_table)
+ 
+ #define coff_bfd_reloc_type_lookup		coff_riscv_reloc_type_lookup
+ #define coff_bfd_reloc_name_lookup		coff_riscv_reloc_name_lookup
+ 
+ static reloc_howto_type *
+ coff_riscv_reloc_type_lookup (bfd * abfd ATTRIBUTE_UNUSED, bfd_reloc_code_real_type code)
+ {
+   switch (code)
+   {
+ #ifdef COFF_WITH_peRISCV64
+   case BFD_RELOC_12_PCREL:
+     return &riscv_reloc_howto_pc;
+   case BFD_RELOC_RISCV_CALL:
+     return &riscv_reloc_howto_jalr;
+ #endif
+   default:
+     BFD_FAIL ();
+     return NULL;
+   }
+ 
+   return NULL;
+ }
+ 
+ static reloc_howto_type *
+ coff_riscv_reloc_name_lookup (bfd *abfd ATTRIBUTE_UNUSED,
+ 			    const char *r_name)
+ {
+ 	unsigned int i;
+ 
+ 	for (i = 0; i < NUM_RELOCS; i++)
+ 	  if (riscv_howto_table[i]->name != NULL
+ 	    && strcasecmp (riscv_howto_table[i]->name, r_name) == 0)
+ 	    return riscv_howto_table[i];
+ 
+   return NULL;
+ }
+ 
+ static reloc_howto_type *
+ coff_riscv_rtype_lookup (unsigned int code)
+ {
+   switch (code)
+   {
+ #ifdef COFF_WITH_peRISCV64
+     case IMAGE_REL_RISCV64_PC:
+       return &riscv_reloc_howto_pc;
+     case IMAGE_REL_RISCV64_JALR:
+       return &riscv_reloc_howto_jalr;
+ #endif
+     default:
+       BFD_FAIL ();
+       return NULL;
+   }
+ 
+   return NULL;
+ }
+ 
+ #define COFF_DEFAULT_SECTION_ALIGNMENT_POWER  2
+ #define COFF_PAGE_SIZE			      0x1000
+ 
+ #ifndef bfd_pe_print_pdata
+ #define bfd_pe_print_pdata      NULL
+ #endif
+ 
+ /* Return TRUE if this relocation should
+    appear in the output .reloc section.  */
+ 
+ static bool
+ in_reloc_p (bfd * abfd ATTRIBUTE_UNUSED,
+             reloc_howto_type * howto)
+ {
+   return !howto->pc_relative;
+ }
+ 
+ #define RTYPE2HOWTO(cache_ptr, dst)				\
+   ((cache_ptr)->howto =	coff_riscv_rtype_lookup((dst)->r_type))
+ 
+ #define SELECT_RELOC(x,howto) { (x).r_type = (howto)->type; }
+ 
+ 
+ #include "coffcode.h"
+ 
+ /* Target vectors.  */
+ const bfd_target
+ #ifdef TARGET_SYM
+   TARGET_SYM =
+ #else
+ # error "target symbol name not specified"
+ #endif
+ {
+ #ifdef TARGET_NAME
+   TARGET_NAME,
+ #else
+ # error "target name not specified"
+ #endif
+   bfd_target_coff_flavour,
+   BFD_ENDIAN_LITTLE,		/* Data byte order is little.  */
+   BFD_ENDIAN_LITTLE,		/* Header byte order is little.  */
+ 
+   (HAS_RELOC | EXEC_P		/* Object flags.  */
+    | HAS_LINENO | HAS_DEBUG
+    | HAS_SYMS | HAS_LOCALS | WP_TEXT | D_PAGED | BFD_COMPRESS | BFD_DECOMPRESS),
+ 
+   (SEC_HAS_CONTENTS | SEC_ALLOC | SEC_LOAD | SEC_RELOC /* Section flags.  */
+ #if defined(COFF_WITH_PE)
+    | SEC_LINK_ONCE | SEC_LINK_DUPLICATES | SEC_READONLY | SEC_DEBUGGING
+ #endif
+    | SEC_CODE | SEC_DATA | SEC_EXCLUDE ),
+ 
+ #ifdef TARGET_UNDERSCORE
+   TARGET_UNDERSCORE,		/* Leading underscore.  */
+ #else
+   0,				/* Leading underscore.  */
+ #endif
+   '/',				/* Ar_pad_char.  */
+   15,				/* Ar_max_namelen.  */
+   0,				/* match priority.  */
+   TARGET_KEEP_UNUSED_SECTION_SYMBOLS, /* keep unused section symbols.  */
+ 
+   /* Data conversion functions.  */
+   bfd_getl64, bfd_getl_signed_64, bfd_putl64,
+   bfd_getl32, bfd_getl_signed_32, bfd_putl32,
+   bfd_getl16, bfd_getl_signed_16, bfd_putl16, /* Data.  */
+   /* Header conversion functions.  */
+   bfd_getl64, bfd_getl_signed_64, bfd_putl64,
+   bfd_getl32, bfd_getl_signed_32, bfd_putl32,
+   bfd_getl16, bfd_getl_signed_16, bfd_putl16, /* Hdrs.  */
+ 
+   /* Note that we allow an object file to be treated as a core file as well.  */
+   {				/* bfd_check_format.  */
+     _bfd_dummy_target,
+     coff_object_p,
+     bfd_generic_archive_p,
+     coff_object_p
+   },
+   {				/* bfd_set_format.  */
+     _bfd_bool_bfd_false_error,
+     coff_mkobject,
+     _bfd_generic_mkarchive,
+     _bfd_bool_bfd_false_error
+   },
+   {				/* bfd_write_contents.  */
+     _bfd_bool_bfd_false_error,
+     coff_write_object_contents,
+     _bfd_write_archive_contents,
+     _bfd_bool_bfd_false_error
+   },
+ 
+   BFD_JUMP_TABLE_GENERIC (coff),
+   BFD_JUMP_TABLE_COPY (coff),
+   BFD_JUMP_TABLE_CORE (_bfd_nocore),
+   BFD_JUMP_TABLE_ARCHIVE (_bfd_archive_coff),
+   BFD_JUMP_TABLE_SYMBOLS (coff),
+   BFD_JUMP_TABLE_RELOCS (coff),
+   BFD_JUMP_TABLE_WRITE (coff),
+   BFD_JUMP_TABLE_LINK (coff),
+   BFD_JUMP_TABLE_DYNAMIC (_bfd_nodynamic),
+ 
+   NULL,
+ 
+   COFF_SWAP_TABLE
+ };
*** bfd/coffcode.h	Sat Jan 14 01:00:00 2023
--- bfd/coffcode.h	Fri Sep 22 04:43:11 2023
***************
*** 2191,2200 ****
--- 2191,2212 ----
      case AMD64_NETBSD_MAGIC:
        arch = bfd_arch_i386;
        machine = bfd_mach_x86_64;
        break;
  #endif
+ #ifdef RISCV32MAGIC
+     case RISCV32MAGIC:
+       arch = bfd_arch_riscv;
+       machine = bfd_mach_riscv32;
+       break;
+ #endif
+ #ifdef RISCV64MAGIC
+     case RISCV64MAGIC:
+       arch = bfd_arch_riscv;
+       machine = bfd_mach_riscv64;
+       break;
+ #endif
  #ifdef IA64MAGIC
      case IA64MAGIC:
        arch = bfd_arch_ia64;
        break;
  #endif
***************
*** 2844,2853 ****
--- 2856,2880 ----
  	case bfd_mach_arm_XScale: * flagsp |= F_ARM_5; break;
  	}
        return true;
  #endif
  
+ #if defined(RISCV32MAGIC) || defined(RISCV64MAGIC) || defined(RISCV128MAGIC)
+     case bfd_arch_riscv:
+       switch (bfd_get_mach (abfd))
+       {
+ #if defined(RISCV32MAGIC)
+       case bfd_mach_riscv32: * magicp = RISCV32MAGIC; break;
+ #endif
+ #if defined(RISCV64MAGIC)
+       case bfd_mach_riscv64: * magicp = RISCV64MAGIC; break;
+ #endif
+       }
+ 
+       return true;
+ #endif
+ 
  #if defined(I386MAGIC) || defined(AMD64MAGIC)
      case bfd_arch_i386:
  #if defined(I386MAGIC)
        *magicp = I386MAGIC;
  #endif
***************
*** 3900,3910 ****
      internal_f.f_flags |= IMAGE_FILE_DEBUG_STRIPPED;
    if (pe_data (abfd)->real_flags & IMAGE_FILE_LARGE_ADDRESS_AWARE)
      internal_f.f_flags |= IMAGE_FILE_LARGE_ADDRESS_AWARE;
  #endif
  
! #if !defined(COFF_WITH_pex64) && !defined(COFF_WITH_peAArch64) && !defined(COFF_WITH_peLoongArch64)
  #ifdef COFF_WITH_PE
    internal_f.f_flags |= IMAGE_FILE_32BIT_MACHINE;
  #else
    if (bfd_little_endian (abfd))
      internal_f.f_flags |= F_AR32WR;
--- 3927,3937 ----
      internal_f.f_flags |= IMAGE_FILE_DEBUG_STRIPPED;
    if (pe_data (abfd)->real_flags & IMAGE_FILE_LARGE_ADDRESS_AWARE)
      internal_f.f_flags |= IMAGE_FILE_LARGE_ADDRESS_AWARE;
  #endif
  
! #if !defined(COFF_WITH_pex64) && !defined(COFF_WITH_peAArch64) && !defined(COFF_WITH_peLoongArch64) && !defined(COFF_WITH_peRISCV64)
  #ifdef COFF_WITH_PE
    internal_f.f_flags |= IMAGE_FILE_32BIT_MACHINE;
  #else
    if (bfd_little_endian (abfd))
      internal_f.f_flags |= F_AR32WR;
***************
*** 3950,3959 ****
--- 3977,3991 ----
  #define __A_MAGIC_SET__
      internal_a.magic = ZMAGIC;
  #endif
  
  #if defined(AARCH64)
+ #define __A_MAGIC_SET__
+     internal_a.magic = ZMAGIC;
+ #endif
+ 
+ #if defined(RISCV)
  #define __A_MAGIC_SET__
      internal_a.magic = ZMAGIC;
  #endif
  
  #if defined(LOONGARCH64)
*** bfd/config.bfd	Sat Jan 14 01:00:00 2023
--- bfd/config.bfd	Mon Oct  2 13:20:31 2023
***************
*** 1217,1226 ****
--- 1216,1230 ----
      want64=true
      ;;
    riscv-*-* | riscv32*-*-*)
      targ_defvec=riscv_elf32_vec
      targ_selvecs="riscv_elf32_vec riscv_elf64_vec riscv_elf32_be_vec riscv_elf64_be_vec"
+     want64=true
+     ;;
+   riscv64*-*-mingw32*)
+     targ_defvec=riscv_pe64_vec
+     targ_selvecs="riscv_pe64_vec riscv_pei64_vec pdb_vec"
      want64=true
      ;;
    riscv64be*-*-*)
      targ_defvec=riscv_elf64_be_vec
      targ_selvecs="riscv_elf32_vec riscv_elf64_vec riscv_elf32_be_vec riscv_elf64_be_vec"
*** bfd/configure.ac	Sat Jan 14 01:00:00 2023
--- bfd/configure.ac	Wed Aug 30 13:37:24 2023
***************
*** 582,591 ****
--- 582,593 ----
      pru_elf32_vec)		 tb="$tb elf32-pru.lo elf32.lo $elf" ;;
      riscv_elf32_vec)		 tb="$tb elf32-riscv.lo elfxx-riscv.lo elf-ifunc.lo elf32.lo $elf" ;;
      riscv_elf64_vec)		 tb="$tb elf64-riscv.lo elf64.lo elfxx-riscv.lo elf-ifunc.lo elf32.lo $elf"; target_size=64 ;;
      riscv_elf32_be_vec)		 tb="$tb elf32-riscv.lo elfxx-riscv.lo elf-ifunc.lo elf32.lo $elf" ;;
      riscv_elf64_be_vec)		 tb="$tb elf64-riscv.lo elf64.lo elfxx-riscv.lo elf-ifunc.lo elf32.lo $elf"; target_size=64 ;;
+     riscv_pe64_vec)       tb="$tb pe-riscv64.lo pex64igen.lo $coff"; target_size=64 ;;
+     riscv_pei64_vec)    tb="$tb pei-riscv64.lo pex64igen.lo $coff"; target_size=64 ;;
      rl78_elf32_vec)		 tb="$tb elf32-rl78.lo elf32.lo $elf" ;;
      rs6000_xcoff64_vec)		 tb="$tb coff64-rs6000.lo aix5ppc-core.lo $xcoff"; target_size=64 ;;
      rs6000_xcoff64_aix_vec)	 tb="$tb coff64-rs6000.lo aix5ppc-core.lo $xcoff"; target_size=64 ;;
      rs6000_xcoff_vec)		 tb="$tb coff-rs6000.lo $xcoff" ;;
      rx_elf32_be_vec)		 tb="$tb elf32-rx.lo elf32.lo $elf" ;;
*** bfd/libpei.h	Sat Jan 14 01:00:00 2023
--- bfd/libpei.h	Wed Aug 30 22:47:50 2023
***************
*** 343,352 ****
--- 343,388 ----
  #define _bfd_XXi_swap_debugdir_in			_bfd_peLoongArch64i_swap_debugdir_in
  #define _bfd_XXi_swap_debugdir_out			_bfd_peLoongArch64i_swap_debugdir_out
  #define _bfd_XXi_write_codeview_record			_bfd_peLoongArch64i_write_codeview_record
  #define _bfd_XXi_slurp_codeview_record			_bfd_peLoongArch64i_slurp_codeview_record
  
+ 
+ #elif defined COFF_WITH_peRISCV64
+ 
+ #define GET_OPTHDR_IMAGE_BASE		 H_GET_64
+ #define PUT_OPTHDR_IMAGE_BASE		 H_PUT_64
+ #define GET_OPTHDR_SIZE_OF_STACK_RESERVE H_GET_64
+ #define PUT_OPTHDR_SIZE_OF_STACK_RESERVE H_PUT_64
+ #define GET_OPTHDR_SIZE_OF_STACK_COMMIT	 H_GET_64
+ #define PUT_OPTHDR_SIZE_OF_STACK_COMMIT	 H_PUT_64
+ #define GET_OPTHDR_SIZE_OF_HEAP_RESERVE	 H_GET_64
+ #define PUT_OPTHDR_SIZE_OF_HEAP_RESERVE	 H_PUT_64
+ #define GET_OPTHDR_SIZE_OF_HEAP_COMMIT	 H_GET_64
+ #define PUT_OPTHDR_SIZE_OF_HEAP_COMMIT	 H_PUT_64
+ #define GET_PDATA_ENTRY			 bfd_get_32
+ 
+ #define _bfd_XX_bfd_copy_private_bfd_data_common	_bfd_pe_bfd_copy_private_bfd_data_common
+ #define _bfd_XX_bfd_copy_private_section_data		_bfd_pe_bfd_copy_private_section_data
+ #define _bfd_XX_get_symbol_info				_bfd_pe_get_symbol_info
+ #define _bfd_XX_only_swap_filehdr_out			_bfd_pe_only_swap_filehdr_out
+ #define _bfd_XX_print_private_bfd_data_common		_bfd_pe_print_private_bfd_data_common
+ #define _bfd_XXi_final_link_postscript			_bfd_pei_final_link_postscript
+ #define _bfd_XXi_only_swap_filehdr_out			_bfd_pei_only_swap_filehdr_out
+ #define _bfd_XXi_swap_aouthdr_in			_bfd_pei_swap_aouthdr_in
+ #define _bfd_XXi_swap_aouthdr_out			_bfd_pei_swap_aouthdr_out
+ #define _bfd_XXi_swap_aux_in				_bfd_pei_swap_aux_in
+ #define _bfd_XXi_swap_aux_out				_bfd_pei_swap_aux_out
+ #define _bfd_XXi_swap_lineno_in				_bfd_pei_swap_lineno_in
+ #define _bfd_XXi_swap_lineno_out			_bfd_pei_swap_lineno_out
+ #define _bfd_XXi_swap_scnhdr_out			_bfd_pei_swap_scnhdr_out
+ #define _bfd_XXi_swap_sym_in				_bfd_pei_swap_sym_in
+ #define _bfd_XXi_swap_sym_out				_bfd_pei_swap_sym_out
+ #define _bfd_XXi_swap_debugdir_in			_bfd_pei_swap_debugdir_in
+ #define _bfd_XXi_swap_debugdir_out			_bfd_pei_swap_debugdir_out
+ #define _bfd_XXi_write_codeview_record			_bfd_pei_write_codeview_record
+ #define _bfd_XXi_slurp_codeview_record			_bfd_pei_slurp_codeview_record
+ 
  #else /* !COFF_WITH_pep */
  
  #define GET_OPTHDR_IMAGE_BASE H_GET_32
  #define PUT_OPTHDR_IMAGE_BASE H_PUT_32
  #define GET_OPTHDR_SIZE_OF_STACK_RESERVE H_GET_32
*** /dev/null	Thu Jan  1 01:00:00 1970
--- bfd/pe-riscv64.c	Wed Aug 30 22:49:29 2023
***************
*** 0 ****
--- 1,74 ----
+ /* Risc-V64 PE BFD backend.
+    Copyright (C) 2023 Free Software Foundation, Inc.
+ 
+    This file is part of BFD, the Binary File Descriptor library.
+ 
+    This program is free software; you can redistribute it and/or modify
+    it under the terms of the GNU General Public License as published by
+    the Free Software Foundation; either version 3 of the License, or
+    (at your option) any later version.
+ 
+    This program is distributed in the hope that it will be useful,
+    but WITHOUT ANY WARRANTY; without even the implied warranty of
+    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+    GNU General Public License for more details.
+ 
+    You should have received a copy of the GNU General Public License
+    along with this program; if not, write to the Free Software
+    Foundation, Inc., 51 Franklin Street - Fifth Floor, Boston,
+    MA 02110-1301, USA.  */
+ 
+ #include "sysdep.h"
+ #include "bfd.h"
+ 
+ #define TARGET_SYM             riscv_pe64_vec
+ #define TARGET_NAME            "pe-riscv64-little"
+ #define TARGET_ARCHITECTURE    bfd_arch_riscv
+ #define TARGET_PAGESIZE        4096
+ #define TARGET_BIG_ENDIAN      0
+ #define TARGET_ARCHIVE         0
+ #define TARGET_PRIORITY        0
+ 
+ /* Rename the above into.. */
+ #define COFF_WITH_peRISCV64
+ #define COFF_WITH_PE
+ #define PCRELOFFSET       true
+ 
+ /* Long section names not allowed in executable images, only object files.  */
+ #define COFF_LONG_SECTION_NAMES 1
+ 
+ #define COFF_SECTION_ALIGNMENT_ENTRIES \
+ { COFF_SECTION_NAME_EXACT_MATCH (".bss"), \
+   COFF_ALIGNMENT_FIELD_EMPTY, COFF_ALIGNMENT_FIELD_EMPTY, 2 }, \
+ { COFF_SECTION_NAME_EXACT_MATCH (".data"), \
+   COFF_ALIGNMENT_FIELD_EMPTY, COFF_ALIGNMENT_FIELD_EMPTY, 2 }, \
+ { COFF_SECTION_NAME_EXACT_MATCH (".rdata"), \
+   COFF_ALIGNMENT_FIELD_EMPTY, COFF_ALIGNMENT_FIELD_EMPTY, 2 }, \
+ { COFF_SECTION_NAME_EXACT_MATCH (".text"), \
+   COFF_ALIGNMENT_FIELD_EMPTY, COFF_ALIGNMENT_FIELD_EMPTY, 2 }, \
+ { COFF_SECTION_NAME_PARTIAL_MATCH (".idata"), \
+   COFF_ALIGNMENT_FIELD_EMPTY, COFF_ALIGNMENT_FIELD_EMPTY, 2 }, \
+ { COFF_SECTION_NAME_EXACT_MATCH (".pdata"), \
+   COFF_ALIGNMENT_FIELD_EMPTY, COFF_ALIGNMENT_FIELD_EMPTY, 2 }, \
+ { COFF_SECTION_NAME_PARTIAL_MATCH (".debug"), \
+   COFF_ALIGNMENT_FIELD_EMPTY, COFF_ALIGNMENT_FIELD_EMPTY, 0 }, \
+ { COFF_SECTION_NAME_PARTIAL_MATCH (".gnu.linkonce.wi."), \
+   COFF_ALIGNMENT_FIELD_EMPTY, COFF_ALIGNMENT_FIELD_EMPTY, 0 }
+ 
+ #define PEI_HEADERS
+ #include "sysdep.h"
+ #include "bfd.h"
+ #include "libbfd.h"
+ #include "coff/riscv.h"
+ #include "coff/internal.h"
+ #include "coff/pe.h"
+ #include "libcoff.h"
+ #include "libpei.h"
+ #include "libiberty.h"
+ 
+ /* Make sure we're setting a 64-bit format.  */
+ #undef AOUTSZ
+ #define AOUTSZ          PEPAOUTSZ
+ #define PEAOUTHDR       PEPAOUTHDR
+ 
+ #include "coff-riscv.c"
*** /dev/null	Thu Jan  1 01:00:00 1970
--- bfd/pei-riscv64.c	Sun Sep 24 12:10:44 2023
***************
*** 0 ****
--- 1,76 ----
+ /* BFD back-end for RISC-V 64 PE IMAGE COFF files.
+    Copyright (C) 2023 Free Software Foundation, Inc.
+ 
+    This file is part of BFD, the Binary File Descriptor library.
+ 
+    This program is free software; you can redistribute it and/or modify
+    it under the terms of the GNU General Public License as published by
+    the Free Software Foundation; either version 3 of the License, or
+    (at your option) any later version.
+ 
+    This program is distributed in the hope that it will be useful,
+    but WITHOUT ANY WARRANTY; without even the implied warranty of
+    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+    GNU General Public License for more details.
+ 
+    You should have received a copy of the GNU General Public License
+    along with this program; if not, write to the Free Software
+    Foundation, Inc., 51 Franklin Street - Fifth Floor, Boston,
+    MA 02110-1301, USA.  */
+ 
+ #include "sysdep.h"
+ #include "bfd.h"
+ 
+ 
+ #define TARGET_SYM             riscv_pe64_vec
+ #define TARGET_NAME            "pei-riscv64-little"
+ #define TARGET_ARCHITECTURE    bfd_arch_riscv
+ #define TARGET_PAGESIZE        4096
+ #define TARGET_BIG_ENDIAN      0
+ #define TARGET_ARCHIVE         0
+ #define TARGET_PRIORITY        0
+ 
+ #define COFF_IMAGE_WITH_PE
+ /* Rename the above into.. */
+ #define COFF_WITH_peRISCV64
+ #define COFF_WITH_PE
+ #define PCRELOFFSET       true
+ 
+ /* Long section names not allowed in executable images, only object files.  */
+ #define COFF_LONG_SECTION_NAMES 1
+ 
+ #define COFF_SECTION_ALIGNMENT_ENTRIES \
+ { COFF_SECTION_NAME_EXACT_MATCH (".bss"), \
+   COFF_ALIGNMENT_FIELD_EMPTY, COFF_ALIGNMENT_FIELD_EMPTY, 2 }, \
+ { COFF_SECTION_NAME_EXACT_MATCH (".data"), \
+   COFF_ALIGNMENT_FIELD_EMPTY, COFF_ALIGNMENT_FIELD_EMPTY, 2 }, \
+ { COFF_SECTION_NAME_EXACT_MATCH (".rdata"), \
+   COFF_ALIGNMENT_FIELD_EMPTY, COFF_ALIGNMENT_FIELD_EMPTY, 2 }, \
+ { COFF_SECTION_NAME_EXACT_MATCH (".text"), \
+   COFF_ALIGNMENT_FIELD_EMPTY, COFF_ALIGNMENT_FIELD_EMPTY, 2 }, \
+ { COFF_SECTION_NAME_PARTIAL_MATCH (".idata"), \
+   COFF_ALIGNMENT_FIELD_EMPTY, COFF_ALIGNMENT_FIELD_EMPTY, 2 }, \
+ { COFF_SECTION_NAME_EXACT_MATCH (".pdata"), \
+   COFF_ALIGNMENT_FIELD_EMPTY, COFF_ALIGNMENT_FIELD_EMPTY, 2 }, \
+ { COFF_SECTION_NAME_PARTIAL_MATCH (".debug"), \
+   COFF_ALIGNMENT_FIELD_EMPTY, COFF_ALIGNMENT_FIELD_EMPTY, 0 }, \
+ { COFF_SECTION_NAME_PARTIAL_MATCH (".gnu.linkonce.wi."), \
+   COFF_ALIGNMENT_FIELD_EMPTY, COFF_ALIGNMENT_FIELD_EMPTY, 0 }
+ 
+ #define PEI_HEADERS
+ #include "sysdep.h"
+ #include "bfd.h"
+ #include "libbfd.h"
+ #include "coff/riscv.h"
+ #include "coff/internal.h"
+ #include "coff/pe.h"
+ #include "libcoff.h"
+ #include "libpei.h"
+ #include "libiberty.h"
+ 
+ /* Make sure we're setting a 64-bit format.  */
+ #undef AOUTSZ
+ #define AOUTSZ          PEPAOUTSZ
+ #define PEAOUTHDR       PEPAOUTHDR
+ 
+ #include "coff-riscv.c"
*** bfd/peicode.h	Sat Jan 14 01:00:00 2023
--- bfd/peicode.h	Fri Sep 22 04:50:00 2023
***************
*** 231,241 ****
  
    if (scnhdr_int->s_vaddr != 0)
      {
        scnhdr_int->s_vaddr += pe_data (abfd)->pe_opthdr.ImageBase;
        /* Do not cut upper 32-bits for 64-bit vma.  */
! #if !defined(COFF_WITH_pex64) && !defined(COFF_WITH_peAArch64) && !defined(COFF_WITH_peLoongArch64)
        scnhdr_int->s_vaddr &= 0xffffffff;
  #endif
      }
  
  #ifndef COFF_NO_HACK_SCNHDR_SIZE
--- 231,241 ----
  
    if (scnhdr_int->s_vaddr != 0)
      {
        scnhdr_int->s_vaddr += pe_data (abfd)->pe_opthdr.ImageBase;
        /* Do not cut upper 32-bits for 64-bit vma.  */
! #if !defined(COFF_WITH_pex64) && !defined(COFF_WITH_peAArch64) && !defined(COFF_WITH_peLoongArch64) && !defined(COFF_WITH_peRISCV64)
        scnhdr_int->s_vaddr &= 0xffffffff;
  #endif
      }
  
  #ifndef COFF_NO_HACK_SCNHDR_SIZE
***************
*** 748,757 ****
--- 748,782 ----
      4, 0
    },
  
  #endif
  
+ #ifdef RISCV32MAGIC
+   /* relocation code needs to be dispatched in 2 stages
+     therefore offset is 0
+     (INFO from dotnet)
+   */
+   { RISCV32MAGIC,
+     {
+       0x97, 0x03, 0x00, 0x00, /* auipc t2, imm20 */
+       0x67, 0x80, 0x03, 0x00, /* jalr zero, t2, imm12 */
+     }, 0, 0
+   },
+ #endif
+ 
+ #ifdef RISCV64MAGIC
+   /* relocation code needs to be dispatched in 2 stages
+     therefore offset is 0
+   */
+   { RISCV64MAGIC,
+     {
+       0x97, 0x03, 0x00, 0x00, /* auipc t2, imm20 */
+       0x67, 0x80, 0x03, 0x00, /* jalr zero, t2, imm12 */
+     }, 0, 0
+   },
+ #endif
+ 
  #ifdef  ARMPEMAGIC
    { ARMPEMAGIC,
      { 0x00, 0xc0, 0x9f, 0xe5, 0x00, 0xf0,
        0x9c, 0xe5, 0x00, 0x00, 0x00, 0x00},
      12, 8
***************
*** 931,941 ****
      {
        if (ordinal == 0)
  	/* See PR 20907 for a reproducer.  */
  	goto error_return;
  
! #if defined(COFF_WITH_pex64) || defined(COFF_WITH_peAArch64) || defined(COFF_WITH_peLoongArch64)
        ((unsigned int *) id4->contents)[0] = ordinal;
        ((unsigned int *) id4->contents)[1] = 0x80000000;
        ((unsigned int *) id5->contents)[0] = ordinal;
        ((unsigned int *) id5->contents)[1] = 0x80000000;
  #else
--- 956,966 ----
      {
        if (ordinal == 0)
  	/* See PR 20907 for a reproducer.  */
  	goto error_return;
  
! #if defined(COFF_WITH_pex64) || defined(COFF_WITH_peAArch64) || defined(COFF_WITH_peLoongArch64) || defined(COFF_WITH_peRISCV64)
        ((unsigned int *) id4->contents)[0] = ordinal;
        ((unsigned int *) id4->contents)[1] = 0x80000000;
        ((unsigned int *) id5->contents)[0] = ordinal;
        ((unsigned int *) id5->contents)[1] = 0x80000000;
  #else
***************
*** 1032,1041 ****
--- 1057,1089 ----
  
        /* Copy in the jump code.  */
        memcpy (text->contents, jtab[i].data, jtab[i].size);
  
        /* Create a reloc for the data in the text section.  */
+ #if defined(RISCV32MAGIC) || defined(RISCV64MAGIC) || defined(RISCV128MAGIC)
+       if (false
+ #if defined(RISCV32MAGIC)
+         || magic == RISCV32MAGIC
+ #endif
+ #if defined(RISCV64MAGIC)
+         || magic == RISCV64MAGIC
+ #endif
+ #if defined(RISCV128MAGIC)
+         || magic == RISCV128MAGIC
+ #endif
+         )
+   {
+       pe_ILF_make_a_symbol_reloc (&vars, (bfd_vma) 0, BFD_RELOC_12_PCREL,
+ 				      (struct bfd_symbol **) imp_sym,
+ 				      imp_index);
+ 	  pe_ILF_make_a_reloc (&vars, (bfd_vma) 0, BFD_RELOC_RISCV_JMP, text);
+ 	  pe_ILF_make_a_symbol_reloc (&vars, (bfd_vma) 4, BFD_RELOC_RISCV_JMP,
+ 				      (struct bfd_symbol **) imp_sym,
+ 				      imp_index);
+   }
+       else
+ #endif
  #ifdef MIPS_ARCH_MAGIC_WINCE
        if (magic == MIPS_ARCH_MAGIC_WINCE)
  	{
  	  pe_ILF_make_a_symbol_reloc (&vars, (bfd_vma) 0, BFD_RELOC_HI16_S,
  				      (struct bfd_symbol **) imp_sym,
***************
*** 1211,1220 ****
--- 1259,1285 ----
      case IMAGE_FILE_MACHINE_MIPS16:
      case IMAGE_FILE_MACHINE_MIPSFPU:
      case IMAGE_FILE_MACHINE_MIPSFPU16:
  #ifdef MIPS_ARCH_MAGIC_WINCE
        magic = MIPS_ARCH_MAGIC_WINCE;
+ #endif
+       break;
+ 
+     case IMAGE_FILE_MACHINE_RISCV32:
+ #ifdef RISCV32MAGIC
+       magic = RISCV32MAGIC;
+ #endif
+       break;
+     case IMAGE_FILE_MACHINE_RISCV64:
+ #ifdef RISCV64MAGIC
+       magic = RISCV64MAGIC;
+ #endif
+       break;
+     
+     case IMAGE_FILE_MACHINE_RISCV128:
+ #ifdef RISCV128MAGIC
+       magic = RISCV128MAGIC;
  #endif
        break;
  
      case IMAGE_FILE_MACHINE_SH3:
      case IMAGE_FILE_MACHINE_SH4:
*** bfd/peXXigen.c	Sat Jan 14 01:00:00 2023
--- bfd/peXXigen.c	Fri Sep 22 04:50:52 2023
***************
*** 86,105 ****
  # include "coff/ia64.h"
  #elif defined COFF_WITH_peAArch64
  # include "coff/aarch64.h"
  #elif defined COFF_WITH_peLoongArch64
  # include "coff/loongarch64.h"
  #else
  # include "coff/i386.h"
  #endif
  
  #include "coff/pe.h"
  #include "libcoff.h"
  #include "libpei.h"
  #include "safe-ctype.h"
  
! #if defined COFF_WITH_pep || defined COFF_WITH_pex64 || defined COFF_WITH_peAArch64 || defined COFF_WITH_peLoongArch64
  # undef AOUTSZ
  # define AOUTSZ		PEPAOUTSZ
  # define PEAOUTHDR	PEPAOUTHDR
  #endif
  
--- 86,107 ----
  # include "coff/ia64.h"
  #elif defined COFF_WITH_peAArch64
  # include "coff/aarch64.h"
  #elif defined COFF_WITH_peLoongArch64
  # include "coff/loongarch64.h"
+ #elif defined COFF_WITH_peRISCV64
+ # include "coff/riscv.h"
  #else
  # include "coff/i386.h"
  #endif
  
  #include "coff/pe.h"
  #include "libcoff.h"
  #include "libpei.h"
  #include "safe-ctype.h"
  
! #if defined COFF_WITH_pep || defined COFF_WITH_pex64 || defined COFF_WITH_peAArch64 || defined COFF_WITH_peLoongArch64 || defined COFF_WITH_peRISCV64
  # undef AOUTSZ
  # define AOUTSZ		PEPAOUTSZ
  # define PEAOUTHDR	PEPAOUTHDR
  #endif
  
***************
*** 472,482 ****
    aouthdr_int->bsize = GET_AOUTHDR_BSIZE (abfd, aouthdr_ext->bsize);
    aouthdr_int->entry = GET_AOUTHDR_ENTRY (abfd, aouthdr_ext->entry);
    aouthdr_int->text_start =
      GET_AOUTHDR_TEXT_START (abfd, aouthdr_ext->text_start);
  
! #if !defined(COFF_WITH_pep) && !defined(COFF_WITH_pex64) && !defined(COFF_WITH_peAArch64) && !defined(COFF_WITH_peLoongArch64)
    /* PE32+ does not have data_start member!  */
    aouthdr_int->data_start =
      GET_AOUTHDR_DATA_START (abfd, aouthdr_ext->data_start);
    a->BaseOfData = aouthdr_int->data_start;
  #endif
--- 474,484 ----
    aouthdr_int->bsize = GET_AOUTHDR_BSIZE (abfd, aouthdr_ext->bsize);
    aouthdr_int->entry = GET_AOUTHDR_ENTRY (abfd, aouthdr_ext->entry);
    aouthdr_int->text_start =
      GET_AOUTHDR_TEXT_START (abfd, aouthdr_ext->text_start);
  
! #if !defined(COFF_WITH_pep) && !defined(COFF_WITH_pex64) && !defined(COFF_WITH_peAArch64) && !defined(COFF_WITH_peLoongArch64) && !defined(COFF_WITH_peRISCV64)
    /* PE32+ does not have data_start member!  */
    aouthdr_int->data_start =
      GET_AOUTHDR_DATA_START (abfd, aouthdr_ext->data_start);
    a->BaseOfData = aouthdr_int->data_start;
  #endif
***************
*** 539,562 ****
      }
  
    if (aouthdr_int->entry)
      {
        aouthdr_int->entry += a->ImageBase;
! #if !defined(COFF_WITH_pep) && !defined(COFF_WITH_pex64) && !defined(COFF_WITH_peAArch64) && !defined(COFF_WITH_peLoongArch64)
        aouthdr_int->entry &= 0xffffffff;
  #endif
      }
  
    if (aouthdr_int->tsize)
      {
        aouthdr_int->text_start += a->ImageBase;
! #if !defined(COFF_WITH_pep) && !defined(COFF_WITH_pex64) && !defined(COFF_WITH_peAArch64) && !defined(COFF_WITH_peLoongArch64)
        aouthdr_int->text_start &= 0xffffffff;
  #endif
      }
  
! #if !defined(COFF_WITH_pep) && !defined(COFF_WITH_pex64) && !defined(COFF_WITH_peAArch64) && !defined(COFF_WITH_peLoongArch64)
    /* PE32+ does not have data_start member!  */
    if (aouthdr_int->dsize)
      {
        aouthdr_int->data_start += a->ImageBase;
        aouthdr_int->data_start &= 0xffffffff;
--- 541,564 ----
      }
  
    if (aouthdr_int->entry)
      {
        aouthdr_int->entry += a->ImageBase;
! #if !defined(COFF_WITH_pep) && !defined(COFF_WITH_pex64) && !defined(COFF_WITH_peAArch64) && !defined(COFF_WITH_peLoongArch64) && !defined(COFF_WITH_peRISCV64)
        aouthdr_int->entry &= 0xffffffff;
  #endif
      }
  
    if (aouthdr_int->tsize)
      {
        aouthdr_int->text_start += a->ImageBase;
! #if !defined(COFF_WITH_pep) && !defined(COFF_WITH_pex64) && !defined(COFF_WITH_peAArch64) && !defined(COFF_WITH_peLoongArch64) && !defined(COFF_WITH_peRISCV64)
        aouthdr_int->text_start &= 0xffffffff;
  #endif
      }
  
! #if !defined(COFF_WITH_pep) && !defined(COFF_WITH_pex64) && !defined(COFF_WITH_peAArch64) && !defined(COFF_WITH_peLoongArch64) && !defined(COFF_WITH_peRISCV64)
    /* PE32+ does not have data_start member!  */
    if (aouthdr_int->dsize)
      {
        aouthdr_int->data_start += a->ImageBase;
        aouthdr_int->data_start &= 0xffffffff;
***************
*** 612,638 ****
    tls = pe->pe_opthdr.DataDirectory[PE_TLS_TABLE];
  
    if (aouthdr_in->tsize)
      {
        aouthdr_in->text_start -= ib;
! #if !defined(COFF_WITH_pep) && !defined(COFF_WITH_pex64) && !defined(COFF_WITH_peAArch64) && !defined(COFF_WITH_peLoongArch64)
        aouthdr_in->text_start &= 0xffffffff;
  #endif
      }
  
    if (aouthdr_in->dsize)
      {
        aouthdr_in->data_start -= ib;
! #if !defined(COFF_WITH_pep) && !defined(COFF_WITH_pex64) && !defined(COFF_WITH_peAArch64) && !defined(COFF_WITH_peLoongArch64)
        aouthdr_in->data_start &= 0xffffffff;
  #endif
      }
  
    if (aouthdr_in->entry)
      {
        aouthdr_in->entry -= ib;
! #if !defined(COFF_WITH_pep) && !defined(COFF_WITH_pex64) && !defined(COFF_WITH_peAArch64) && !defined(COFF_WITH_peLoongArch64)
        aouthdr_in->entry &= 0xffffffff;
  #endif
      }
  
  #define FA(x) (((x) + fa -1 ) & (- fa))
--- 614,640 ----
    tls = pe->pe_opthdr.DataDirectory[PE_TLS_TABLE];
  
    if (aouthdr_in->tsize)
      {
        aouthdr_in->text_start -= ib;
! #if !defined(COFF_WITH_pep) && !defined(COFF_WITH_pex64) && !defined(COFF_WITH_peAArch64) && !defined(COFF_WITH_peLoongArch64) && !defined(COFF_WITH_peRISCV64)
        aouthdr_in->text_start &= 0xffffffff;
  #endif
      }
  
    if (aouthdr_in->dsize)
      {
        aouthdr_in->data_start -= ib;
! #if !defined(COFF_WITH_pep) && !defined(COFF_WITH_pex64) && !defined(COFF_WITH_peAArch64) && !defined(COFF_WITH_peLoongArch64) && !defined(COFF_WITH_peRISCV64)
        aouthdr_in->data_start &= 0xffffffff;
  #endif
      }
  
    if (aouthdr_in->entry)
      {
        aouthdr_in->entry -= ib;
! #if !defined(COFF_WITH_pep) && !defined(COFF_WITH_pex64) && !defined(COFF_WITH_peAArch64) && !defined(COFF_WITH_peLoongArch64) && !defined(COFF_WITH_peRISCV64)
        aouthdr_in->entry &= 0xffffffff;
  #endif
      }
  
  #define FA(x) (((x) + fa -1 ) & (- fa))
***************
*** 742,752 ****
    PUT_AOUTHDR_BSIZE (abfd, aouthdr_in->bsize, aouthdr_out->standard.bsize);
    PUT_AOUTHDR_ENTRY (abfd, aouthdr_in->entry, aouthdr_out->standard.entry);
    PUT_AOUTHDR_TEXT_START (abfd, aouthdr_in->text_start,
  			  aouthdr_out->standard.text_start);
  
! #if !defined(COFF_WITH_pep) && !defined(COFF_WITH_pex64) && !defined(COFF_WITH_peAArch64) && !defined(COFF_WITH_peLoongArch64)
    /* PE32+ does not have data_start member!  */
    PUT_AOUTHDR_DATA_START (abfd, aouthdr_in->data_start,
  			  aouthdr_out->standard.data_start);
  #endif
  
--- 744,754 ----
    PUT_AOUTHDR_BSIZE (abfd, aouthdr_in->bsize, aouthdr_out->standard.bsize);
    PUT_AOUTHDR_ENTRY (abfd, aouthdr_in->entry, aouthdr_out->standard.entry);
    PUT_AOUTHDR_TEXT_START (abfd, aouthdr_in->text_start,
  			  aouthdr_out->standard.text_start);
  
! #if !defined(COFF_WITH_pep) && !defined(COFF_WITH_pex64) && !defined(COFF_WITH_peAArch64) && !defined(COFF_WITH_peLoongArch64) && !defined(COFF_WITH_peRISCV64)
    /* PE32+ does not have data_start member!  */
    PUT_AOUTHDR_DATA_START (abfd, aouthdr_in->data_start,
  			  aouthdr_out->standard.data_start);
  #endif
  
***************
*** 928,938 ****
    ss = scnhdr_int->s_vaddr - pe_data (abfd)->pe_opthdr.ImageBase;
    if (scnhdr_int->s_vaddr < pe_data (abfd)->pe_opthdr.ImageBase)
      _bfd_error_handler (_("%pB:%.8s: section below image base"),
                          abfd, scnhdr_int->s_name);
    /* Do not compare lower 32-bits for 64-bit vma.  */
! #if !defined(COFF_WITH_pex64) && !defined(COFF_WITH_peAArch64) && !defined(COFF_WITH_peLoongArch64)
    else if(ss != (ss & 0xffffffff))
      _bfd_error_handler (_("%pB:%.8s: RVA truncated"), abfd, scnhdr_int->s_name);
    PUT_SCNHDR_VADDR (abfd, ss & 0xffffffff, scnhdr_ext->s_vaddr);
  #else
    PUT_SCNHDR_VADDR (abfd, ss, scnhdr_ext->s_vaddr);
--- 930,940 ----
    ss = scnhdr_int->s_vaddr - pe_data (abfd)->pe_opthdr.ImageBase;
    if (scnhdr_int->s_vaddr < pe_data (abfd)->pe_opthdr.ImageBase)
      _bfd_error_handler (_("%pB:%.8s: section below image base"),
                          abfd, scnhdr_int->s_name);
    /* Do not compare lower 32-bits for 64-bit vma.  */
! #if !defined(COFF_WITH_pex64) && !defined(COFF_WITH_peAArch64) && !defined(COFF_WITH_peLoongArch64) && !defined(COFF_WITH_peRISCV64)
    else if(ss != (ss & 0xffffffff))
      _bfd_error_handler (_("%pB:%.8s: RVA truncated"), abfd, scnhdr_int->s_name);
    PUT_SCNHDR_VADDR (abfd, ss & 0xffffffff, scnhdr_ext->s_vaddr);
  #else
    PUT_SCNHDR_VADDR (abfd, ss, scnhdr_ext->s_vaddr);
***************
*** 1812,1822 ****
     This is the version for uncompressed data.  */
  
  static bool
  pe_print_pdata (bfd * abfd, void * vfile)
  {
! #if defined(COFF_WITH_pep) && !defined(COFF_WITH_pex64) && !defined(COFF_WITH_peAArch64) && !defined(COFF_WITH_peLoongArch64)
  # define PDATA_ROW_SIZE	(3 * 8)
  #else
  # define PDATA_ROW_SIZE	(5 * 4)
  #endif
    FILE *file = (FILE *) vfile;
--- 1814,1824 ----
     This is the version for uncompressed data.  */
  
  static bool
  pe_print_pdata (bfd * abfd, void * vfile)
  {
! #if defined(COFF_WITH_pep) && !defined(COFF_WITH_pex64) && !defined(COFF_WITH_peAArch64) && !defined(COFF_WITH_peLoongArch64) && !defined(COFF_WITH_peRISCV64)
  # define PDATA_ROW_SIZE	(3 * 8)
  #else
  # define PDATA_ROW_SIZE	(5 * 4)
  #endif
    FILE *file = (FILE *) vfile;
***************
*** 1839,1849 ****
  	     _("warning, .pdata section size (%ld) is not a multiple of %d\n"),
  	     (long) stop, onaline);
  
    fprintf (file,
  	   _("\nThe Function Table (interpreted .pdata section contents)\n"));
! #if defined(COFF_WITH_pep) && !defined(COFF_WITH_pex64) && !defined(COFF_WITH_peAArch64) && !defined(COFF_WITH_peLoongArch64)
    fprintf (file,
  	   _(" vma:\t\t\tBegin Address    End Address      Unwind Info\n"));
  #else
    fprintf (file, _("\
   vma:\t\tBegin    End      EH       EH       PrologEnd  Exception\n\
--- 1841,1851 ----
  	     _("warning, .pdata section size (%ld) is not a multiple of %d\n"),
  	     (long) stop, onaline);
  
    fprintf (file,
  	   _("\nThe Function Table (interpreted .pdata section contents)\n"));
! #if defined(COFF_WITH_pep) && !defined(COFF_WITH_pex64) && !defined(COFF_WITH_peAArch64) && !defined(COFF_WITH_peLoongArch64) && !defined(COFF_WITH_peRISCV64)
    fprintf (file,
  	   _(" vma:\t\t\tBegin Address    End Address      Unwind Info\n"));
  #else
    fprintf (file, _("\
   vma:\t\tBegin    End      EH       EH       PrologEnd  Exception\n\
***************
*** 1876,1886 ****
        bfd_vma begin_addr;
        bfd_vma end_addr;
        bfd_vma eh_handler;
        bfd_vma eh_data;
        bfd_vma prolog_end_addr;
! #if !defined(COFF_WITH_pep) || defined(COFF_WITH_pex64) || defined(COFF_WITH_peAArch64) || defined(COFF_WITH_peLoongArch64)
        int em_data;
  #endif
  
        if (i + PDATA_ROW_SIZE > stop)
  	break;
--- 1878,1888 ----
        bfd_vma begin_addr;
        bfd_vma end_addr;
        bfd_vma eh_handler;
        bfd_vma eh_data;
        bfd_vma prolog_end_addr;
! #if !defined(COFF_WITH_pep) || defined(COFF_WITH_pex64) || defined(COFF_WITH_peAArch64) || defined(COFF_WITH_peLoongArch64) || defined(COFF_WITH_peRISCV64)
        int em_data;
  #endif
  
        if (i + PDATA_ROW_SIZE > stop)
  	break;
***************
*** 1894,1915 ****
        if (begin_addr == 0 && end_addr == 0 && eh_handler == 0
  	  && eh_data == 0 && prolog_end_addr == 0)
  	/* We are probably into the padding of the section now.  */
  	break;
  
! #if !defined(COFF_WITH_pep) || defined(COFF_WITH_pex64) || defined(COFF_WITH_peAArch64) || defined(COFF_WITH_peLoongArch64)
        em_data = ((eh_handler & 0x1) << 2) | (prolog_end_addr & 0x3);
  #endif
        eh_handler &= ~(bfd_vma) 0x3;
        prolog_end_addr &= ~(bfd_vma) 0x3;
  
        fputc (' ', file);
        bfd_fprintf_vma (abfd, file, i + section->vma); fputc ('\t', file);
        bfd_fprintf_vma (abfd, file, begin_addr); fputc (' ', file);
        bfd_fprintf_vma (abfd, file, end_addr); fputc (' ', file);
        bfd_fprintf_vma (abfd, file, eh_handler);
! #if !defined(COFF_WITH_pep) || defined(COFF_WITH_pex64) || defined(COFF_WITH_peAArch64) || defined(COFF_WITH_peLoongArch64)
        fputc (' ', file);
        bfd_fprintf_vma (abfd, file, eh_data); fputc (' ', file);
        bfd_fprintf_vma (abfd, file, prolog_end_addr);
        fprintf (file, "   %x", em_data);
  #endif
--- 1896,1917 ----
        if (begin_addr == 0 && end_addr == 0 && eh_handler == 0
  	  && eh_data == 0 && prolog_end_addr == 0)
  	/* We are probably into the padding of the section now.  */
  	break;
  
! #if !defined(COFF_WITH_pep) || defined(COFF_WITH_pex64) || defined(COFF_WITH_peAArch64) || defined(COFF_WITH_peLoongArch64) || defined(COFF_WITH_peRISCV64)
        em_data = ((eh_handler & 0x1) << 2) | (prolog_end_addr & 0x3);
  #endif
        eh_handler &= ~(bfd_vma) 0x3;
        prolog_end_addr &= ~(bfd_vma) 0x3;
  
        fputc (' ', file);
        bfd_fprintf_vma (abfd, file, i + section->vma); fputc ('\t', file);
        bfd_fprintf_vma (abfd, file, begin_addr); fputc (' ', file);
        bfd_fprintf_vma (abfd, file, end_addr); fputc (' ', file);
        bfd_fprintf_vma (abfd, file, eh_handler);
! #if !defined(COFF_WITH_pep) || defined(COFF_WITH_pex64) || defined(COFF_WITH_peAArch64) || defined(COFF_WITH_peLoongArch64) || defined(COFF_WITH_peRISCV64)
        fputc (' ', file);
        bfd_fprintf_vma (abfd, file, eh_data); fputc (' ', file);
        bfd_fprintf_vma (abfd, file, prolog_end_addr);
        fprintf (file, "   %x", em_data);
  #endif
***************
*** 2801,2811 ****
    bfd_fprintf_vma (abfd, file, i->SizeOfUninitializedData);
    fprintf (file, "\nAddressOfEntryPoint\t");
    bfd_fprintf_vma (abfd, file, i->AddressOfEntryPoint);
    fprintf (file, "\nBaseOfCode\t\t");
    bfd_fprintf_vma (abfd, file, i->BaseOfCode);
! #if !defined(COFF_WITH_pep) && !defined(COFF_WITH_pex64) && !defined(COFF_WITH_peAArch64) && !defined(COFF_WITH_peLoongArch64)
    /* PE32+ does not have BaseOfData member!  */
    fprintf (file, "\nBaseOfData\t\t");
    bfd_fprintf_vma (abfd, file, i->BaseOfData);
  #endif
  
--- 2803,2813 ----
    bfd_fprintf_vma (abfd, file, i->SizeOfUninitializedData);
    fprintf (file, "\nAddressOfEntryPoint\t");
    bfd_fprintf_vma (abfd, file, i->AddressOfEntryPoint);
    fprintf (file, "\nBaseOfCode\t\t");
    bfd_fprintf_vma (abfd, file, i->BaseOfCode);
! #if !defined(COFF_WITH_pep) && !defined(COFF_WITH_pex64) && !defined(COFF_WITH_peAArch64) && !defined(COFF_WITH_peLoongArch64) && !defined(COFF_WITH_peRISCV64)
    /* PE32+ does not have BaseOfData member!  */
    fprintf (file, "\nBaseOfData\t\t");
    bfd_fprintf_vma (abfd, file, i->BaseOfData);
  #endif
  
***************
*** 3116,3126 ****
  _bfd_XX_get_symbol_info (bfd * abfd, asymbol *symbol, symbol_info *ret)
  {
    coff_get_symbol_info (abfd, symbol, ret);
  }
  
! #if !defined(COFF_WITH_pep) && (defined(COFF_WITH_pex64) || defined(COFF_WITH_peAArch64) || defined(COFF_WITH_peLoongArch64))
  static int
  sort_x64_pdata (const void *l, const void *r)
  {
    const char *lp = (const char *) l;
    const char *rp = (const char *) r;
--- 3118,3128 ----
  _bfd_XX_get_symbol_info (bfd * abfd, asymbol *symbol, symbol_info *ret)
  {
    coff_get_symbol_info (abfd, symbol, ret);
  }
  
! #if !defined(COFF_WITH_pep) && (defined(COFF_WITH_pex64) || defined(COFF_WITH_peAArch64) || defined(COFF_WITH_peLoongArch64) || defined(COFF_WITH_peRISCV64))
  static int
  sort_x64_pdata (const void *l, const void *r)
  {
    const char *lp = (const char *) l;
    const char *rp = (const char *) r;
***************
*** 4535,4554 ****
  	}
       /* According to PECOFF sepcifications by Microsoft version 8.2
  	the TLS data directory consists of 4 pointers, followed
  	by two 4-byte integer. This implies that the total size
  	is different for 32-bit and 64-bit executables.  */
! #if !defined(COFF_WITH_pep) && !defined(COFF_WITH_pex64) && !defined(COFF_WITH_peAArch64) && !defined(COFF_WITH_peLoongArch64)
        pe_data (abfd)->pe_opthdr.DataDirectory[PE_TLS_TABLE].Size = 0x18;
  #else
        pe_data (abfd)->pe_opthdr.DataDirectory[PE_TLS_TABLE].Size = 0x28;
  #endif
      }
  
  /* If there is a .pdata section and we have linked pdata finally, we
       need to sort the entries ascending.  */
! #if !defined(COFF_WITH_pep) && (defined(COFF_WITH_pex64) || defined(COFF_WITH_peAArch64) || defined(COFF_WITH_peLoongArch64))
    {
      asection *sec = bfd_get_section_by_name (abfd, ".pdata");
  
      if (sec)
        {
--- 4537,4556 ----
  	}
       /* According to PECOFF sepcifications by Microsoft version 8.2
  	the TLS data directory consists of 4 pointers, followed
  	by two 4-byte integer. This implies that the total size
  	is different for 32-bit and 64-bit executables.  */
! #if !defined(COFF_WITH_pep) && !defined(COFF_WITH_pex64) && !defined(COFF_WITH_peAArch64) && !defined(COFF_WITH_peLoongArch64) && !defined(COFF_WITH_peRISCV64)
        pe_data (abfd)->pe_opthdr.DataDirectory[PE_TLS_TABLE].Size = 0x18;
  #else
        pe_data (abfd)->pe_opthdr.DataDirectory[PE_TLS_TABLE].Size = 0x28;
  #endif
      }
  
  /* If there is a .pdata section and we have linked pdata finally, we
       need to sort the entries ascending.  */
! #if !defined(COFF_WITH_pep) && (defined(COFF_WITH_pex64) || defined(COFF_WITH_peAArch64) || defined(COFF_WITH_peLoongArch64) || defined(COFF_WITH_peRISCV64))
    {
      asection *sec = bfd_get_section_by_name (abfd, ".pdata");
  
      if (sec)
        {
*** bfd/targets.c	Sat Jan 14 01:00:00 2023
--- bfd/targets.c	Wed Aug 30 13:32:46 2023
***************
*** 862,871 ****
--- 862,873 ----
  extern const bfd_target pru_elf32_vec;
  extern const bfd_target riscv_elf32_vec;
  extern const bfd_target riscv_elf64_vec;
  extern const bfd_target riscv_elf32_be_vec;
  extern const bfd_target riscv_elf64_be_vec;
+ extern const bfd_target riscv_pe64_vec;
+ extern const bfd_target riscv_pei64_vec;
  extern const bfd_target rl78_elf32_vec;
  extern const bfd_target rs6000_xcoff64_vec;
  extern const bfd_target rs6000_xcoff64_aix_vec;
  extern const bfd_target rs6000_xcoff_vec;
  extern const bfd_target rx_elf32_be_vec;
***************
*** 1256,1265 ****
--- 1258,1269 ----
  #ifdef BFD64
  	&riscv_elf32_vec,
  	&riscv_elf64_vec,
  	&riscv_elf32_be_vec,
  	&riscv_elf64_be_vec,
+ 	&riscv_pe64_vec,
+ 	&riscv_pei64_vec,
  #endif
  	&rl78_elf32_vec,
  
  #ifdef BFD64
  	&rs6000_xcoff64_vec,
*** include/coff/pe.h	Sat Jan 14 01:00:00 2023
--- include/coff/pe.h	Thu Aug 31 00:11:56 2023
***************
*** 152,161 ****
--- 152,164 ----
  #define IMAGE_FILE_MACHINE_POWERPC           0x01f0
  #define IMAGE_FILE_MACHINE_POWERPCFP         0x01f1
  #define IMAGE_FILE_MACHINE_R10000            0x0168
  #define IMAGE_FILE_MACHINE_R3000             0x0162
  #define IMAGE_FILE_MACHINE_R4000             0x0166
+ #define IMAGE_FILE_MACHINE_RISCV32           0x5032
+ #define IMAGE_FILE_MACHINE_RISCV64           0x5064
+ #define IMAGE_FILE_MACHINE_RISCV128          0x5128
  #define IMAGE_FILE_MACHINE_SH3               0x01a2
  #define IMAGE_FILE_MACHINE_SH3DSP            0x01a3
  #define IMAGE_FILE_MACHINE_SH3E              0x01a4
  #define IMAGE_FILE_MACHINE_SH4               0x01a6
  #define IMAGE_FILE_MACHINE_SH5               0x01a8
*** /dev/null	Thu Jan  1 01:00:00 1970
--- include/coff/riscv.h	Fri Sep 15 21:54:55 2023
***************
*** 0 ****
--- 1,69 ----
+ /* RISC-V COFF support for BFD.
+    Copyright (C) 2023 Free Software Foundation, Inc.
+ 
+    This file is part of BFD, the Binary File Descriptor library.
+ 
+    This program is free software; you can redistribute it and/or modify
+    it under the terms of the GNU General Public License as published by
+    the Free Software Foundation; either version 3 of the License, or
+    (at your option) any later version.
+ 
+    This program is distributed in the hope that it will be useful,
+    but WITHOUT ANY WARRANTY; without even the implied warranty of
+    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+    GNU General Public License for more details.
+ 
+    You should have received a copy of the GNU General Public License
+    along with this program; if not, write to the Free Software Foundation,
+    Inc., 51 Franklin Street - Fifth Floor, Boston, MA 02110-1301, USA.  */
+ 
+ #define COFFRISCV 1
+ 
+ #define L_LNNO_SIZE 2
+ #define INCLUDE_COMDAT_FIELDS_IN_AUXENT
+ #include "coff/external.h"
+ 
+ /* From Microsoft specification. */
+ #define RISCV32MAGIC  0x5032
+ #define	RISCV64MAGIC	0x5064  
+ #define RISCV128MAGIC 0x5128
+ 
+ #define BADMAG64(x) ((x).f_magic != RISCV64MAGIC)
+ #define BADMAG32(x) ((x).f_magic != RISCV32MAGIC)
+ #define BADMAG128(x) ((x).f_magic != RISCV128MAGIC)
+ 
+ #define RISCV         1                 /* Customize coffcode.h.  */
+ 
+ #define IMAGE_NT_OPTIONAL_HDR64_MAGIC      0x20b
+ 
+ #define OMAGIC          0404    /* Object files, eg as output.  */
+ #define ZMAGIC          IMAGE_NT_OPTIONAL_HDR64_MAGIC    /* Demand load format, eg normal ld output 0x10b.  */
+ #define STMAGIC		0401	/* Target shlib.  */
+ #define SHMAGIC		0443	/* Host   shlib.  */
+ 
+ /* define some NT default values */
+ /*  #define NT_IMAGE_BASE        0x400000 moved to internal.h */
+ #define NT_SECTION_ALIGNMENT 0x1000
+ #define NT_FILE_ALIGNMENT    0x200
+ #define NT_DEF_RESERVE       0x100000
+ #define NT_DEF_COMMIT        0x1000
+ 
+ /* We use the .rdata section to hold read only data.  */
+ #define _LIT	".rdata"
+ 
+ /********************** RELOCATION DIRECTIVES **********************/
+ struct external_reloc
+ {
+   char r_vaddr[4];
+   char r_symndx[4];
+   char r_type[2];
+ };
+ 
+ #define RELOC struct external_reloc
+ #define RELSZ 10
+ 
+ /* RISC-V relocations types. */
+ 
+ #define IMAGE_REL_RISCV64_PC            0x0003
+ #define IMAGE_REL_RISCV64_JALR          0x0004
+ 
