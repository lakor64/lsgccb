*** bfd/bfd.c	Mon Jan 29 01:00:00 2024
--- bfd/bfd.c	Wed Jul  3 03:08:22 2024
***************
*** 2109,2118 ****
--- 2109,2119 ----
        || strcmp (name, "pe-aarch64-little") == 0
        || strcmp (name, "pei-aarch64-little") == 0
        || strcmp (name, "pe-arm-wince-little") == 0
        || strcmp (name, "pei-arm-wince-little") == 0
        || strcmp (name, "pei-loongarch64") == 0
+ 	  || strcmp (name, "pe-riscv64-little") == 0
        || strcmp (name, "pei-riscv64-little") == 0
        || strcmp (name, "aixcoff-rs6000") == 0
        || strcmp (name, "aix5coff64-rs6000") == 0)
      return 1;
  
*** bfd/config.bfd	Mon Jan 29 01:00:00 2024
--- bfd/config.bfd	Wed Jul  3 03:46:49 2024
***************
*** 1235,1244 ****
--- 1235,1250 ----
    riscv-*-* | riscv32*-*-*)
      targ_defvec=riscv_elf32_vec
      targ_selvecs="riscv_elf32_vec riscv_elf64_vec riscv_elf32_be_vec riscv_elf64_be_vec riscv64_pei_vec"
      want64=true
      ;;
+   riscv64*-*-mingw32*)
+     targ_defvec=riscv64_pe_vec
+     targ_selvecs="riscv64_pe_vec riscv64_pei_vec riscv_elf64_vec riscv_elf32_vec pdb_vec"
+     want64=true
+ 	targ_underscore=no
+     ;;
    riscv64be*-*-*)
      targ_defvec=riscv_elf64_be_vec
      targ_selvecs="riscv_elf32_vec riscv_elf64_vec riscv_elf32_be_vec riscv_elf64_be_vec riscv64_pei_vec"
      want64=true
      ;;
*** bfd/configure.ac	Mon Jan 29 01:00:00 2024
--- bfd/configure.ac	Wed Jul  3 03:33:37 2024
***************
*** 588,597 ****
--- 588,598 ----
      pru_elf32_vec)		 tb="$tb elf32-pru.lo elf32.lo $elf" ;;
      riscv_elf32_vec)		 tb="$tb elf32-riscv.lo elfxx-riscv.lo elf-ifunc.lo elf32.lo $elf" ;;
      riscv_elf64_vec)		 tb="$tb elf64-riscv.lo elf64.lo elfxx-riscv.lo elf-ifunc.lo elf32.lo $elf"; target_size=64 ;;
      riscv_elf32_be_vec)		 tb="$tb elf32-riscv.lo elfxx-riscv.lo elf-ifunc.lo elf32.lo $elf" ;;
      riscv_elf64_be_vec)		 tb="$tb elf64-riscv.lo elf64.lo elfxx-riscv.lo elf-ifunc.lo elf32.lo $elf"; target_size=64 ;;
+     riscv64_pe_vec)       tb="$tb pe-riscv64.lo pe-riscv64igen.lo $coff"; target_size=64 ;;
      riscv64_pei_vec)		 tb="$tb pei-riscv64.lo pe-riscv64igen.lo $coff"; target_size=64 ;;
      rl78_elf32_vec)		 tb="$tb elf32-rl78.lo elf32.lo $elf" ;;
      rs6000_xcoff64_vec)		 tb="$tb coff64-rs6000.lo aix5ppc-core.lo $xcoff"; target_size=64 ;;
      rs6000_xcoff64_aix_vec)	 tb="$tb coff64-rs6000.lo aix5ppc-core.lo $xcoff"; target_size=64 ;;
      rs6000_xcoff_vec)		 tb="$tb coff-rs6000.lo $xcoff" ;;
*** /dev/null	Thu Jan  1 01:00:00 1970
--- bfd/pe-riscv64.c	Wed Jul  3 03:48:36 2024
***************
*** 0 ****
--- 1,74 ----
+ /* BFD back-end for RISC-V 64-bit PE COFF files.
+    Copyright (C) 2023-2024 Free Software Foundation, Inc.
+ 
+    This file is part of BFD, the Binary File Descriptor library.
+ 
+    This program is free software; you can redistribute it and/or modify
+    it under the terms of the GNU General Public License as published by
+    the Free Software Foundation; either version 3 of the License, or
+    (at your option) any later version.
+ 
+    This program is distributed in the hope that it will be useful,
+    but WITHOUT ANY WARRANTY; without even the implied warranty of
+    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+    GNU General Public License for more details.
+ 
+    You should have received a copy of the GNU General Public License
+    along with this program; if not, write to the Free Software
+    Foundation, Inc., 51 Franklin Street - Fifth Floor, Boston,
+    MA 02110-1301, USA.  */
+ 
+ #include "sysdep.h"
+ #include "bfd.h"
+ 
+ #define TARGET_SYM             riscv64_pe_vec
+ #define TARGET_NAME            "pe-riscv64-little"
+ #define TARGET_ARCHITECTURE    bfd_arch_riscv
+ #define TARGET_PAGESIZE		   4096
+ #define TARGET_BIG_ENDIAN      0
+ #define TARGET_ARCHIVE         0
+ #define TARGET_PRIORITY        0
+ 
+ /* Rename the above into.. */
+ #define COFF_WITH_peRiscV64
+ #define COFF_WITH_PE
+ #define PCRELOFFSET       true
+ 
+ /* Long section names not allowed in executable images, only object files.  */
+ #define COFF_LONG_SECTION_NAMES 1
+ 
+ #define COFF_SECTION_ALIGNMENT_ENTRIES \
+ { COFF_SECTION_NAME_EXACT_MATCH (".bss"), \
+   COFF_ALIGNMENT_FIELD_EMPTY, COFF_ALIGNMENT_FIELD_EMPTY, 2 }, \
+ { COFF_SECTION_NAME_EXACT_MATCH (".data"), \
+   COFF_ALIGNMENT_FIELD_EMPTY, COFF_ALIGNMENT_FIELD_EMPTY, 2 }, \
+ { COFF_SECTION_NAME_EXACT_MATCH (".rdata"), \
+   COFF_ALIGNMENT_FIELD_EMPTY, COFF_ALIGNMENT_FIELD_EMPTY, 2 }, \
+ { COFF_SECTION_NAME_EXACT_MATCH (".text"), \
+   COFF_ALIGNMENT_FIELD_EMPTY, COFF_ALIGNMENT_FIELD_EMPTY, 2 }, \
+ { COFF_SECTION_NAME_PARTIAL_MATCH (".idata"), \
+   COFF_ALIGNMENT_FIELD_EMPTY, COFF_ALIGNMENT_FIELD_EMPTY, 2 }, \
+ { COFF_SECTION_NAME_EXACT_MATCH (".pdata"), \
+   COFF_ALIGNMENT_FIELD_EMPTY, COFF_ALIGNMENT_FIELD_EMPTY, 2 }, \
+ { COFF_SECTION_NAME_PARTIAL_MATCH (".debug"), \
+   COFF_ALIGNMENT_FIELD_EMPTY, COFF_ALIGNMENT_FIELD_EMPTY, 0 }, \
+ { COFF_SECTION_NAME_PARTIAL_MATCH (".gnu.linkonce.wi."), \
+   COFF_ALIGNMENT_FIELD_EMPTY, COFF_ALIGNMENT_FIELD_EMPTY, 0 }
+ 
+ #define PEI_HEADERS
+ #include "sysdep.h"
+ #include "bfd.h"
+ #include "libbfd.h"
+ #include "coff/riscv64.h"
+ #include "coff/internal.h"
+ #include "coff/pe.h"
+ #include "libcoff.h"
+ #include "libpei.h"
+ #include "libiberty.h"
+ 
+ /* Make sure we're setting a 64-bit format.  */
+ #undef AOUTSZ
+ #define AOUTSZ          PEPAOUTSZ
+ #define PEAOUTHDR       PEPAOUTHDR
+ 
+ #include "coff-riscv64.c"
\ No newline at end of file
*** bfd/targets.c	Mon Jan 29 01:00:00 2024
--- bfd/targets.c	Wed Jul  3 03:22:58 2024
***************
*** 861,870 ****
--- 861,871 ----
  extern const bfd_target pru_elf32_vec;
  extern const bfd_target riscv_elf32_vec;
  extern const bfd_target riscv_elf64_vec;
  extern const bfd_target riscv_elf32_be_vec;
  extern const bfd_target riscv_elf64_be_vec;
+ extern const bfd_target riscv64_pe_vec;
  extern const bfd_target riscv64_pei_vec;
  extern const bfd_target rl78_elf32_vec;
  extern const bfd_target rs6000_xcoff64_vec;
  extern const bfd_target rs6000_xcoff64_aix_vec;
  extern const bfd_target rs6000_xcoff_vec;
***************
*** 1259,1268 ****
--- 1260,1270 ----
  #ifdef BFD64
  	&riscv_elf32_vec,
  	&riscv_elf64_vec,
  	&riscv_elf32_be_vec,
  	&riscv_elf64_be_vec,
+ 	&riscv64_pe_vec,
  	&riscv64_pei_vec,
  #endif
  	&rl78_elf32_vec,
  
  #ifdef BFD64
